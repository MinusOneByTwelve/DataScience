package Training.ScalaSpark

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.log4j._

//while read line; do echo -e "$line\n"; sleep .01; done < shakespeare.txt | nc -lk 9998
//spark-submit --class "Training.ScalaSpark" --master local Stream1.jar localhost 9998 5

object Stream1 {
  def main(args: Array[String]) {
    Logger.getLogger("org").setLevel(Level.ERROR)
    val sparkConf = new SparkConf().setAppName("Streaming Word Count")
    val ssc = new StreamingContext(sparkConf, Seconds(args(2).toInt))

    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    //def uuid = java.util.UUID.randomUUID.toString
    //wordCounts.saveAsTextFiles("hdfs://10.142.1.1:8020/user/contactrkk4095/sprk/"+uuid)
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
    /*
      val sc = new SparkContext(conf)
      val input = sc.textFile("hdfs://"+args(0)+":8020/user"+args(1))
      val words = input.flatMap(line => line.split(' '))
      val lowerCaseWords = words.map(word => word.toLowerCase())
      val counts2 = lowerCaseWords.map(word => (word, 1))
      val counts3 = counts2.reduceByKey(_ + _)
      counts3.saveAsTextFile("hdfs://"+args(0)+":8020/user"+args(2))      
      sc.stop() 
    */
    
  }
}
